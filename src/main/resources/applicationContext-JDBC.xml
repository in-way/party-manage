<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- ========================= Spring的配置 ========================= -->
	<!-- 使Spring关注Annotation 启动注解功能-->
	<context:annotation-config/>

	<!-- 通过配置织入@Aspectj切面  -->
	<aop:aspectj-autoproxy />

	<!-- 让Spring通过自动扫描来查询和管理Bean,并检查@Required,@Autowired的属性已被注入
			这样配置之后,就省去了DAO层和Service层等配置代码.会让代码变得容易管理	 -->
	<context:component-scan base-package="com.sunsharing.party"/>
	<!--日志包是ihom下面-->
	<context:component-scan base-package="com.sunsharing.ihome"/>

	<!--在线表单 -->
	<context:component-scan base-package="com.sunsharing.zeus.scurd.configure" />

	<!-- ======================== 数据源的配置 ========================= -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
		<property name="idleConnectionTestPeriod" value="${cpool.idleConnectionTestPeriod}"/>
		<property name="acquireRetryAttempts" value="${cpool.acquireRetryAttempts}"/>
		<property name="acquireRetryDelay" value="${cpool.acquireRetryDelay}"/>
		<property name="breakAfterAcquireFailure" value="${cpool.breakAfterAcquireFailure}"/>
	</bean>

	<bean id="logdataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${log.jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${log.jdbc.url}" />
		<property name="user" value="${log.jdbc.username}" />
		<property name="password" value="${log.jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
		<property name="idleConnectionTestPeriod" value="${cpool.idleConnectionTestPeriod}"/>
		<property name="acquireRetryAttempts" value="${cpool.acquireRetryAttempts}"/>
		<property name="acquireRetryDelay" value="${cpool.acquireRetryDelay}"/>
		<property name="breakAfterAcquireFailure" value="${cpool.breakAfterAcquireFailure}"/>
	</bean>

	<!-- 添加jdbcTemplate -->
	<bean id="jdbcTemplate"
		  class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 日志配置jdbcTemplate -->
	<bean id="logjdbcTemplate"
		  class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="logdataSource"/>
	</bean>

	<!-- ========================= Hibernate 的SessionFactory类的配置,包含是否打印SQL语句等信息 ========================= -->

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>-->
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
			</props>
		</property>
		<!-- 表与实体类的映射 -->
		<property name="packagesToScan">
			<list>
				<value>com.sunsharing.party.entity</value>
			</list>
		</property>
	</bean>

	<!-- =========================Spring中用Hibernate处理事务的配置========================= -->
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- 事务配置 Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<!-- Hibernate 与spring jdbcTemplate共享事物的管理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource"/>
	</bean>

</beans> 
